{"version":3,"file":"static/js/728.8c8ec882.chunk.js","mappings":"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","sources":["components/adminView-component/adminView.js","../node_modules/react-bootstrap/esm/Badge.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { services } from \"../servicesAPI\";\nimport { Image } from \"cloudinary-react\";\nimport { Row, Col, Form, Button, Card, Dropdown, Badge, OverlayTrigger, Tooltip } from 'react-bootstrap';\nimport axios from 'axios';\nimport { InView } from 'react-intersection-observer';\nimport './adminView.css';\nimport CustomButton from '../button-component/customButton';\n\nexport default function AdminView(props) {\n  const {\n    adminClients,\n    adminProjects,\n    primaryColor,\n    secondaryColor,\n    navigate,\n    setSnackBarInfo,\n    getAllProjects\n  } = props;\n\n  const [deleteProject, setDeleteProject] = useState(false);\n  const [projectsInView, setProjectsInView] = useState(true);\n  const [currentChoice, setCurrentChoice] = useState({});\n\n  const removeProject = (project) => {\n    console.log(project._id);\n    const token = localStorage.getItem('token');\n    setSnackBarInfo({\n      message: 'Removing Project',\n      loading: true,\n      show: 'true'\n    });\n    axios.delete(`https://polar-tor-24509.herokuapp.com/projects/${project._id}`, {\n      headers: { Authorization: `Bearer ${token}` }\n    }).then((response) => {\n      setSnackBarInfo({\n        show: 'true',\n        message: 'Project Removed!',\n        loading: false,\n      });\n      getAllProjects();\n    }).catch((error) => {\n      console.log(error);\n      setSnackBarInfo({\n        show: 'true',\n        message: 'Failed to Remove Project',\n        loading: false\n      });\n    })\n  }\n\n  return (\n    <>\n      <Row className='m-auto' style={{ justifyContent: 'center' }}  >\n        {!deleteProject ?\n          <Col className='m-auto justify-content-center'>\n            {/* <Col className='m-2' >\n              <CustomButton submitButton={true} primaryColor={'red'}\n                onClickFunction={function () {\n                  setDeleteProject(true);\n                }}\n                text={'Delete Project'} />\n            </Col> */}\n            <div className='m-2'>\n              <CustomButton primaryColor={primaryColor}\n                onClickFunction={function () { setProjectsInView(true) }}\n                currentChoice={currentChoice} setCurrentChoice={setCurrentChoice}\n                text={'Your Projects'} />\n            </div>\n            <div className='m-2'>\n              <CustomButton primaryColor={primaryColor} currentChoice={currentChoice} setCurrentChoice={setCurrentChoice}\n                onClickFunction={function () {\n                  setProjectsInView(false);\n                }}\n                text={'Your Clients'} />\n            </div>\n          </Col>\n          :\n          <Col className='m-2' style={(projectsInView) ? {} : { backgroundColor: primaryColor }} >\n            <CustomButton submitButton={true} primaryColor={primaryColor}\n              onClickFunction={function () {\n                setDeleteProject(false);\n              }}\n              text={'Done'} />\n          </Col>\n        }\n      </Row>\n      {(projectsInView) ?\n        <Row className='m-auto' style={{ justifyContent: 'center' }}>\n          {adminProjects.length === 0 && (\n            <div style={{ height: '50vh' }} className='text-center'>You Don't Have Any Projects</div>\n          )}\n          {adminProjects.length > 0 && adminProjects.map((project, index) => {\n            let service = services.find((s) => project.service.toLowerCase().includes(s.image));\n            return (\n              <InView triggerOnce={true}>\n                {({ inView, ref, entry }) => (\n                  <Card ref={ref} key={index} className='m-3' style={{ width: '18rem', margin: '0', padding: '0' }}>\n                    <div style={{ position: 'relative' }}>\n                      {inView &&\n                        <Card.Img style={{ height: '190px' }} as={Image} publicId={(service) ? service.image : 'custom'} />\n                      }\n                      <div className='service-title'>{project.service}</div>\n                    </div>\n                    <Card.Body>\n                      <Card.Text>Status: <Badge className='p-2'>{project.status.title}</Badge></Card.Text>\n                      <Card.Text className='text-center'>\n                        {project.description}\n                      </Card.Text>\n                      <Card.Footer>\n                        <Row className='justify-content-center'>\n                          {deleteProject ?\n                            <Button variant='danger' onClick={() => { removeProject(project); }}>remove</Button>\n                            :\n                            <CustomButton primaryColor={primaryColor}\n                              onClickFunction={function () {\n                                navigate('project', {\n                                  state: { selectedProject: project, selectedService: service }\n                                });\n                              }}\n                              text={'See Project'} login={true} submitButton={true} />\n                          }\n\n                        </Row>\n                      </Card.Footer>\n                    </Card.Body>\n                  </Card>\n                )}\n              </InView>\n            )\n          })}\n        </Row>\n        :\n        <Row className='m-auto' style={{ justifyContent: 'center' }}>\n          {adminClients.map((client, index) => {\n            const userInitials = (client.firstName.slice(0, 1) + client.lastName.slice(0, 1));\n            return (\n              <Card key={index} className='m-3' style={{ width: '18rem', margin: '0', padding: '0' }}>\n                <div style={{ display: 'flex' }}>\n                  <div style={{ backgroundColor: client.color }} className='client-badge'>\n                    {userInitials}\n                  </div>\n                  <Card.Text className='m-auto' style={{ fontSize: '20px' }}>\n                    {client.firstName} {client.lastName}\n                  </Card.Text>\n                </div>\n                <Card.Body>\n                  <Card.Text>Username: <Badge bg='secondary' className='p-2'>{client.username}</Badge></Card.Text>\n                  <Card.Text >\n                    Company: {client.company}\n                  </Card.Text>\n                  <Card.Text >\n                    Phone: {client.phone}\n                  </Card.Text>\n                  <Card.Text >\n                    Address: {client.address}\n                  </Card.Text>\n                  <Card.Footer>\n                  </Card.Footer>\n                </Card.Body>\n              </Card>\n            )\n          })}\n        </Row>\n      }\n    </>\n  );\n}","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst defaultProps = {\n  bg: 'primary',\n  pill: false\n};\nconst Badge = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  bg,\n  pill,\n  text,\n  className,\n  as: Component = 'span',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'badge');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, prefix, pill && `rounded-pill`, text && `text-${text}`, bg && `bg-${bg}`)\n  });\n});\nBadge.displayName = 'Badge';\nBadge.defaultProps = defaultProps;\nexport default Badge;"],"names":["AdminView","props","adminClients","adminProjects","primaryColor","navigate","secondaryColor","setSnackBarInfo","getAllProjects","useState","deleteProject","setDeleteProject","projectsInView","setProjectsInView","currentChoice","setCurrentChoice","Row","className","style","justifyContent","Col","backgroundColor","submitButton","onClickFunction","text","length","height","map","project","index","service","services","s","toLowerCase","includes","image","triggerOnce","inView","ref","entry","Card","width","margin","padding","position","as","Image","publicId","Badge","status","title","description","Button","variant","onClick","console","log","_id","token","localStorage","getItem","message","loading","show","axios","headers","Authorization","then","response","catch","error","removeProject","state","selectedProject","selectedService","login","client","userInitials","firstName","slice","lastName","display","color","fontSize","bg","username","company","phone","address","React","bsPrefix","pill","Component","prefix","useBootstrapPrefix","_jsx","classNames","displayName","defaultProps"],"sourceRoot":""}