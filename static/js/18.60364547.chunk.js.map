{"version":3,"file":"static/js/18.60364547.chunk.js","mappings":"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","sources":["components/profile-component/profile.js","components/servicesAPI.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './profile.css';\nimport { Container, Row, Col, Form, Button, Card, Dropdown } from 'react-bootstrap';\nimport { Image } from 'cloudinary-react';\nimport FloatingLabel from 'react-bootstrap/FloatingLabel';\nimport axios from 'axios';\nimport { Check, Edit, MoreVertical, Send, X } from 'react-feather';\nimport FormAlert from '../formAlert-component/formAlert';\nimport Badge from 'react-bootstrap/Badge';\nimport { services } from '../servicesAPI';\nimport Loading from '../loading-component/loading';\n\nexport default function Profile(props) {\n    const { projects, onBackClick, userData, getUserData, setSnackBarInfo, snackbarBarInfo } = props;\n    const [username, setUsername] = useState('');\n    const [firstName, setFirstName] = useState('');\n    const [lastName, setLastName] = useState('');\n    const [password, setPassword] = useState('');\n    const [phone, setPhone] = useState('');\n    const [email, setEmail] = useState('');\n    const [address, setAddress] = useState('');\n    const [typeOfClient, setTypeOfClient] = useState({})\n    const [editing, setEditing] = useState(false);\n\n    const [errors, setErrors] = useState({});\n\n    useEffect(() => {\n        setUsername(userData.username);\n        setEmail(userData.email);\n        setFirstName(userData.firstName);\n        setLastName(userData.lastName);\n        setTypeOfClient(userData.typeOfClient);\n        (userData.phone) && setPhone(userData.phone);\n        (userData.address) && setAddress(userData.address);\n    }, [projects, userData]);\n\n    const updateUser = () => {\n        const username = localStorage.getItem('user');\n        const token = localStorage.getItem('token');\n        const isReq = validate();\n        if (isReq) {\n            setSnackBarInfo({\n                show: true,\n                message: 'Updating Information',\n                loading: true\n            });\n            axios.put(`https://kh-movie-app.herokuapp.com/users/${username}`, {\n                username: username,\n                email: email,\n                firstName: firstName,\n                lastName: lastName,\n                typeOfClient: typeOfClient,\n                phone: phone,\n                address: address\n            },\n                {\n                    headers: { Authorization: `Bearer ${token}` },\n                })\n                .then((response) => {\n                    localStorage.setItem('user', username);\n                    setEditing(false);\n                    getUserData();\n                    setSnackBarInfo({\n                        show: true,\n                        message: 'Updated',\n                        loading: false\n                    });\n                })\n                .catch(function (error) {\n                    console.log(error);\n                    setSnackBarInfo({\n                        show: true,\n                        message: 'failed to update',\n                        loading: false\n                    });\n\n                });\n        }\n    };\n\n    // const onDeleteAccount = () => {\n    //     const username = localStorage.getItem('user');\n    //     const token = localStorage.getItem('token');\n    //     axios.delete(`https://kh-movie-app.herokuapp.com/users/${username}`,\n    //         {\n    //             headers: { Authorization: `Bearer ${token}` },\n    //         })\n    //         .then((response) => {\n    //             console.log(response);\n    //             alert('user unregisterd');\n    //             localStorage.removeItem('user');\n    //             localStorage.removeItem('token');\n    //             window.open('/', '_self');\n    //         })\n    //         .catch(function (error) {\n    //             console.log(error);\n    //         });\n    // }\n\n    const validate = () => {\n        const newErrors = {};\n        let isReq = true;\n        if (!firstName) {\n            newErrors.firstName = '*required'\n            isReq = false;\n        }\n        if (!lastName) {\n            newErrors.lastName = '*required'\n            isReq = false;\n        }\n        if (!email) {\n            newErrors.email = '*required'\n            isReq = false;\n        } else if (email.indexOf('@') === -1) {\n            newErrors.email = '*invalid'\n            isReq = false;\n        }\n        if (phone !== undefined) {\n            const phoneNumberLength = phone.replace(/[^\\d]/g, '').length\n            if (phoneNumberLength > 0 && phoneNumberLength < 10) {\n                newErrors.phone = '*invalid'\n                isReq = false;\n            }\n        }\n        setErrors(newErrors);\n        return isReq;\n    }\n\n    const formatPhoneNumber = (value) => {\n        if (!value) return value;\n        const phoneNumber = value.replace(/[^\\d]/g, '');\n        const phoneNumberLength = phoneNumber.length;\n        if (phoneNumberLength < 4) return phoneNumber;\n        if (phoneNumberLength < 7) {\n            return `(${phoneNumber.slice(0, 3)}) ${phoneNumber.slice(3)}`;\n        }\n        return `(${phoneNumber.slice(0, 3)}) ${phoneNumber.slice(3, 6)}-${phoneNumber.slice(6, 10)}`\n    }\n\n    const userInitials = (firstName.slice(0, 1) + lastName.slice(0, 1));\n\n    return (\n        <>\n            <div className='profile-badge'>{userInitials}</div>\n            <div style={{ position: 'relative' }}>\n                <div className='profile-background'></div>\n                <Image publicId='cld-sample-2' className='profileImage profileImage' />\n            </div>\n            <div className='mt-4 mb-5'>\n                <Card className='profileIntro profileIntro ml-auto'>\n                    <Card.Title className='profile-name'>{firstName} {lastName}</Card.Title>\n                    <Card.Title className='company-name'>{typeOfClient.title}</Card.Title>\n                    {!editing ?\n                        <Dropdown className='editButton'>\n                            <Dropdown.Toggle as={MoreVertical} style={{ cursor: 'pointer', width: '30px', height: '30px' }} id=\"dropdown-basic\" />\n\n                            <Dropdown.Menu>\n                                <Dropdown.Item onClick={() => setEditing(true)}>Edit Profile</Dropdown.Item>\n                            </Dropdown.Menu>\n                        </Dropdown>\n                        :\n                        <>\n                            <Check onClick={() => updateUser()} className='editButton' style={{ color: 'green' }} />\n                            <X className='cancelButton' onClick={() => { setEditing(false); getUserData() }} />\n                        </>\n                    }\n                </Card>\n                <Card className='m-auto profile-card' style={{ maxWidth: '1128px', color: 'black', border: 'none', paddingTop: '30px' }}>\n                    <Row>\n                        {/* <Col className='m-3' xs={10} md={4}>\n                            <Form>\n                                <Form.Group className='m-1'>\n                                    <div style={{ position: 'relative' }}>\n                                        <Form.Control\n                                            type='text'\n                                            placeholder='First Name'\n                                            value={firstName}\n                                            onChange={(e) => setFirstName(e.target.value)} />\n                                        {(errors.firstName) && <FormAlert message={errors.firstName} type={'error'} />}\n                                    </div>\n                                </Form.Group>\n                                <Form.Group className='m-1'>\n                                    <div style={{ position: 'relative' }}>\n                                        <Form.Control\n                                            type='text'\n                                            placeholder='Last Name'\n                                            value={lastName}\n                                            onChange={(e) => setLastName(e.target.value)} />\n                                        {(errors.lastName) && <FormAlert message={errors.lastName} type={'error'} />}\n                                    </div>\n                                </Form.Group>\n                                <Form.Group className='m-1'>\n                                    <div style={{ position: 'relative' }}>\n                                        <Form.Control\n                                            type='text'\n                                            placeholder='Username'\n                                            value={username}\n                                            onChange={(e) => setUsername(e.target.value)} />\n                                        {(errors.username) && <FormAlert message={errors.username} type={'error'} />}\n                                    </div>\n                                </Form.Group>\n                                <Form.Group className='m-1'>\n                                    <div style={{ position: 'relative' }}>\n                                        <Form.Control\n                                            type='text'\n                                            placeholder='Email'\n                                            value={email}\n                                            onChange={(e) => setEmail(e.target.value)} />\n                                        {(errors.email) && <FormAlert message={errors.email} type={'error'} />}\n                                    </div>\n                                </Form.Group>\n                                <Form.Group className='m-1'>\n                                    <div style={{ position: 'relative' }}>\n                                        <Form.Control\n                                            type='text'\n                                            name='password'\n                                            placeholder='New Password'\n                                            onChange={(e) => setPhone(formatPhoneNumber(e.target.value))} />\n                                        {(errors.phone) && <FormAlert message={errors.phone} type={'error'} />}\n                                    </div>\n                                </Form.Group>\n                                <Form.Group className='m-1'>\n                                    <div style={{ position: 'relative' }}>\n                                        <Form.Control\n                                            type='address'\n                                            value={address}\n                                            placeholder='Address'\n                                            onChange={(e) => setAddress(e.target.value)} />\n                                        {(errors.address) && <FormAlert message={errors.address} type={'error'} />}\n                                    </div>\n                                </Form.Group>\n                            </Form>\n                        </Col>  */}\n                        <Col className='my-1 mx-1'>\n                            <Card style={{ color: 'black', border: 'none' }}>\n                                <Card.Title className='m-1'>Projects</Card.Title>\n                                <hr />\n                                <Row className='m-auto'>\n                                    {projects.length === 0 && (\n                                        <div style={{ height: '50vh' }} className='text-center'>You Don't Have Any Projects</div>\n                                    )}\n                                    {projects.length > 0 && projects.map((project) => {\n                                        return (\n                                            <Card className='mb-2' style={{ width: '18rem', margin: '0', padding: '0' }}>\n                                                <Card.Img as={Image} publicId='roof' />\n                                                <Card.Body>\n                                                    <Card.Title>{project.service}</Card.Title>\n                                                    <Card.Text>\n                                                        {project.description}\n                                                    </Card.Text>\n                                                    <Button variant=\"primary\">See Project</Button>\n                                                </Card.Body>\n                                            </Card>\n                                        )\n                                    })}\n                                </Row>\n                            </Card>\n                        </Col>\n                    </Row>\n                </Card >\n            </div>\n        </>\n    );\n}","export const services = [\n  {\n    _id: 1,\n    title: 'Storm Restoration',\n    image: 'storm',\n    description: ''\n  },\n  {\n    _id: 2,\n    title: 'Insurance Negotiation',\n    image: 'insurance',\n    description: ''\n  },\n  {\n\n    _id: 3,\n    title: 'Roofing',\n    image: 'roof',\n    description: ''\n  },\n  {\n\n    _id: 4,\n    title: 'Flooring',\n    image: 'flooring',\n    description: ''\n  },\n  {\n    _id: 5,\n    title: 'Siding',\n    image: 'siding',\n    description: ''\n  },\n  {\n    _id: 6,\n    title: 'Soffit',\n    image: 'soffit',\n    description: ''\n  },\n  {\n    _id: 7,\n    title: 'Fascia',\n    image: 'fascia',\n    description: ''\n  },\n  {\n    _id: 8,\n    title: 'Paint',\n    image: 'paint',\n    description: ''\n  }\n]"],"names":["Profile","props","projects","userData","onBackClick","getUserData","setSnackBarInfo","snackbarBarInfo","useState","setUsername","firstName","setFirstName","lastName","setLastName","phone","setPhone","email","setEmail","address","setAddress","typeOfClient","setTypeOfClient","editing","setEditing","setErrors","useEffect","username","validate","newErrors","isReq","indexOf","undefined","phoneNumberLength","replace","length","userInitials","slice","className","style","position","publicId","Card","title","onClick","localStorage","getItem","token","show","message","loading","axios","headers","Authorization","then","response","setItem","catch","error","console","log","updateUser","color","Dropdown","as","MoreVertical","cursor","width","height","id","maxWidth","border","paddingTop","Row","Col","map","project","margin","padding","Image","service","description","Button","variant","services","_id","image"],"sourceRoot":""}